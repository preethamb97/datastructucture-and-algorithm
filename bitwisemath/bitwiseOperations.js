// TODO ✅ basic bitwise operations like AND and XOR

// TODO ✅ Bitwise shifts

// TODO ✅ Iterating over all 2^N subsets

/*

13 = 1.8 1.4 0.2 1.1 => 1101(2) => 00001101(2) => 13

100(2) => 4 => 0100(2)

111(2) => 7 0111(2)

╔═══╦═══╦════╦══════╦══════╦═════╗
║ A ║ B ║ A! ║ A&&B ║ A||B ║ A^B ║
╠═══╬═══╬════╬══════╬══════╬═════╣
║ 0 ║ 0 ║ 1  ║  0   ║  0   ║  0  ║
╠═══╬═══╬════╬══════╬══════╬═════╣
║ 0 ║ 1 ║ 1  ║  0   ║  1   ║  1  ║
╠═══╬═══╬════╬══════╬══════╬═════╣
║ 1 ║ 0 ║ 0  ║  0   ║  1   ║  1  ║
╠═══╬═══╬════╬══════╬══════╬═════╣
║ 1 ║ 1 ║ 0  ║  1   ║  1   ║  O  ║
╚═══╩═══╩════╩══════╩══════╩═════╝

If we notice correctly A^B is equal to A!=B


53  =  110101(2)
28 = 11100(2)
═════════════╗
53&&28       ║
═════════════║
  0110101    ║
& 0011100    ║
═════════════╣ 
  0010100    ║
═════════════╝
53&&28=20



BITWISE shifts

left shift
13 => 1101 left shift by 2
52 => 110100 
2^k  -> 2^i  -> 2 ^ (i + k)

4 => 0100 left shift by 3
32 => 100000
2^k  -> 2^i  -> 2 ^ (i + k)

2^(2 + 3) => 2^5 => 32 => 100000(2)  
x << k

right shift
x >> k
1101 => 13
11 => 3
x/(2 ^ k)

*/